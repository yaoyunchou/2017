{"version":3,"sources":["../../src/common/bas.service.js"],"names":["Shcema","Service","name","schema","DbModal","model","key","hasOwnProperty","item","filter","pageSize","pageNumber","expect","sortter","skipItems","query","find","skip","limit","updated","sort","count","findOne","exec","id","Types","ObjectId","_id","findByIdAndUpdate","upsert","toSchema","save","e","console","log"],"mappings":";;;;;;;;;AAAA;;;;AAIA;;;;;;;;IAFCA,M,sBAAAA,M;;IAIoBC,O;AACpB,kBAAYC,IAAZ,EAAkBC,MAAlB,EAA0B;AAAA;;AACzB,OAAKA,MAAL,GAAcA,MAAd;AACA,OAAKC,OAAL,GAAe,mBAAQC,KAAR,CAAcH,IAAd,EAAoB,KAAKC,MAAzB,CAAf;AACA;AACD;;;;;;yBAIOG,G,EAAK;AACX,UAAO,KAAKH,MAAL,CAAYI,cAAZ,CAA2BD,GAA3B,CAAP;AACA;;;2BACQE,I,EAAM;AACd,UAAO,IAAI,KAAKJ,OAAT,CAAiBI,IAAjB,CAAP;AACA;AACD;;;;;;;;;0BAMQC,M,EAAOC,Q,EAA2C;AAAA,OAAjCC,UAAiC,uEAApB,CAAoB;AAAA,OAAlBC,MAAkB;AAAA,OAATC,OAAS;;AACzDD,YAAQA,UAAS,EAAjB;AACA,OAAIE,YAAY,CAACH,aAAW,CAAZ,IAAiBD,QAAjC;AACA,OAAIK,QAAQ,KAAKX,OAAL,CAAaY,IAAb,CAAkBP,MAAlB,EAAyBG,MAAzB,CAAZ;AACA,OAAIF,QAAJ,EAAc;AACbK,UAAME,IAAN,CAAWH,SAAX,EAAsBI,KAAtB,CAA4BR,QAA5B;AACA;AACDG,aAAUA,WAAW;AACpBM,aAAS,CAAC;AADU,IAArB;AAGA,UAAOJ,MAAMK,IAAN,CAAWP,OAAX,CAAP;AACA;;;wBACKJ,M,EAAQ;AACb,OAAIM,QAAQ,KAAKX,OAAL,CAAaY,IAAb,CAAkBP,MAAlB,CAAZ;AACA,OAAIY,QAASN,MAAMM,KAAN,EAAb;AACA,UAAOA,KAAP;AACA;AACD;;;;;;0BAGQZ,M,EAAQ;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAO,KAAKL,OAAL,CAAakB,OAAb,CAAqBb,MAArB,EAA6Bc,IAA7B,EAAP;AACA;;;8BACWC,E,EAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAO,KAAKpB,OAAL,CAAakB,OAAb,CAAqB;AAC3B,WAAO,mBAAQG,KAAR,CAAcC,QAAd,CAAuBF,EAAvB;AADoB,IAArB,EAEJD,IAFI,EAAP;AAGA;AACD;;;;;;2BAGSf,I,EAAM;AACd,OAAIgB,KAAKhB,KAAKmB,GAAd;AACA,OAAI;AACH,QAAIH,EAAJ,EAAQ;AACP,YAAOhB,KAAKmB,GAAZ;AACA,YAAO,KAAKvB,OAAL,CAAawB,iBAAb,CAA+BJ,EAA/B,EAAmChB,IAAnC,EAAyC;AAC/CqB,cAAQ;AADuC,MAAzC,CAAP;AAGA,KALD,MAKO;AACN,YAAO,KAAKC,QAAL,CAActB,IAAd,EAAoBuB,IAApB,EAAP;AACA;AACD,IATD,CASE,OAAOC,CAAP,EAAU;AACXC,YAAQC,GAAR,CAAYF,CAAZ;AACA;AAED;;;2BACQ,CAER;;;;;;kBA1FmB/B,O","file":"bas.service.js","sourcesContent":["import mogoose from \"mongoose\";\nvar {\n\tShcema\n} = mogoose;\nimport _ from \"lodash\";\n\nexport default class Service {\n\tconstructor(name, schema) {\n\t\tthis.schema = schema;\n\t\tthis.DbModal = mogoose.model(name, this.schema)\n\t}\n\t/**\n\t * @param  {} key\n\t */\n\n\thasKey(key) {\n\t\treturn this.schema.hasOwnProperty(key);\n\t}\n\ttoSchema(item) {\n\t\treturn new this.DbModal(item);\n\t}\n\t/**\n\t * @param  {String} filter\n\t * @param  {Number} pageSize=10\n\t * @param  {Number} pageNumber=0\n\t * @param  {*} sortter\n\t */\n\tgetList(filter,pageSize, pageNumber = 1,expect,  sortter) {\n\t\texpect =expect ||{};\n\t\tvar skipItems = (pageNumber-1) * pageSize;\n\t\tvar query = this.DbModal.find(filter,expect);\n\t\tif (pageSize) {\n\t\t\tquery.skip(skipItems).limit(pageSize);\n\t\t}\n\t\tsortter = sortter || {\n\t\t\tupdated: -1\n\t\t};\n\t\treturn query.sort(sortter);\n\t}\n\tcount(filter) {\n\t\tvar query = this.DbModal.find(filter);\n\t\tvar count  = query.count();\n\t\treturn count;\n\t}\n\t/**\n\t * @param  {String} filter\n\t */\n\tgetItem(filter) {\n\t\t// return new Promise((resolve, reject) => {\n\t\t// \tthis.DbModal.findOne(filter).exec((err,item)=>{\n\t\t// \t\t//console.log(item);\n\t\t// \t\tif(err){\n\t\t// \t\t\treject('没有找到对应的'+this.name);\n\t\t// \t\t}else{\n\t\t// \t\t\tresolve(item);\n\t\t// \t\t}\n\t\t// \t});\n\t\t// })\n\t\treturn this.DbModal.findOne(filter).exec();\n\t}\n\tgetItemById(id) {\n\t\t// return new Promise((resolve, reject) => {\n\t\t// \tthis.DbModal.findOne(filter).exec((err,item)=>{\n\t\t// \t\t//console.log(item);\n\t\t// \t\tif(err){\n\t\t// \t\t\treject('没有找到对应的'+this.name);\n\t\t// \t\t}else{\n\t\t// \t\t\tresolve(item);\n\t\t// \t\t}\n\t\t// \t});\n\t\t// })\n\t\treturn this.DbModal.findOne({\n\t\t\t'_id': mogoose.Types.ObjectId(id)\n\t\t}).exec();\n\t}\n\t/**\n\t * @param  {Object} item\n\t */\n\tsaveItem(item) {\n\t\tvar id = item._id;\n\t\ttry {\n\t\t\tif (id) {\n\t\t\t\tdelete item._id;\n\t\t\t\treturn this.DbModal.findByIdAndUpdate(id, item, {\n\t\t\t\t\tupsert: true\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\treturn this.toSchema(item).save();\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\n\t}\n\tcreate() {\n\n\t}\n}"]}