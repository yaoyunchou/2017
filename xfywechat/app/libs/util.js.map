{"version":3,"sources":["../../src/libs/util.js"],"names":["fs","require","Promise","exports","readFileAsync","fpth","encoding","resolve","reject","readFile","err","content","writeFileAsync","writeFile","request","iconv","FeedParser","fetchInfomation","fetch","feed","typeId","service","posts","options","url","headers","req","timeout","pool","setMaxListeners","setHeader","feedparser","on","done","res","stream","charset","Array","statusCode","emit","Error","getUrlParam","test","decodeStream","pipe","console","log","saveInfo","post","read","push","transToPost","string","name","reg","RegExp","r","match","unescape","mPost","title","link","description","pubDate","source","author","arguments"],"mappings":"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","file":"util.js","sourcesContent":["/**\n * Created by yao on 2016/10/29.\n */\n\"use strict\";\n\nvar fs = require('fs');\nvar Promise = require('bluebird');\n\nexports.readFileAsync = function (fpth, encoding) {\n\treturn new Promise(function (resolve, reject) {\n\t\tfs.readFile(fpth, encoding, function (err, content) {\n\t\t\tif (err) {\n\t\t\t\treject(err);\n\t\t\t} else {\n\t\t\t\tresolve(content);\n\t\t\t}\n\t\t});\n\t});\n};\nexports.writeFileAsync = function (fpth, content) {\n\treturn new Promise(function (resolve, reject) {\n\t\tfs.writeFile(fpth, content, function (err) {\n\t\t\tif (err) {\n\t\t\t\treject(err);\n\t\t\t} else {\n\t\t\t\tresolve(content);\n\t\t\t}\n\t\t});\n\t});\n};\nvar request = require('request'),\n\ticonv = require('iconv-lite'),\n\tFeedParser = require('feedparser');\n\n/**\n * \n * \n * @param {string} feed  网址\n * @param {number} typeId 对不同的网址进行的编号\n * @param {function} service 对应的方法\n */\nexports.fetchInfomation = function fetch(feed, typeId,service) {\n\tvar posts;//定义收到的内容的容器\n\t// Define our streams  \n\n\tvar options = {\n\t\turl: feed,\n\t\theaders: {\n\t\t\t'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36',\n\t\t\t'accept': 'text/html,application/xhtml+xml'\n\t\t}\n\t};\n\tvar req = request(feed, {\n\t\ttimeout: 10000,\n\t\tpool: false\n\t});\n\treq.setMaxListeners(50);\n\t// Some feeds do not response without user-agent and accept headers.  \n\treq.setHeader('user-agent', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36')\n\t\t.setHeader('accept', 'text/html,application/xhtml+xml');\n\n\tvar feedparser = new FeedParser();\n\n\t// Define our handlers  \n\treq.on('error', done);\n\treq.on('response', function (res) {\n\t\tvar stream = this,\n\t\t\ticonv, charset;\n\t\tposts = new Array();\n\t\tif (res.statusCode != 200) return this.emit('error', new Error('Bad status code'));\n\t\tcharset = getUrlParam((res.headers['content-type'] || ''), \"charset\");\n\t\tif (!iconv && charset && !/utf-*8/i.test(charset)) {\n\t\t\ttry {\n\t\t\t\ticonv = iconv.decodeStream('utf-8');\n\t\t\t\t//iconv.on('error', done);\n\t\t\t\tstream = this.pipe(iconv);\n\t\t\t} catch (err) {\n\t\t\t\tthis.emit('error', err);\n\t\t\t}\n\t\t}\n\t\tstream.pipe(feedparser);\n\t});\n\n\tfeedparser.on('error', done);\n\t//运行结束后将整个数据进行存库\n\tfeedparser.on('end', function (err) {\n\t\tconsole.log(\"存到数据库\");\n\t\tservice.saveInfo(posts); //存到数据库  \n\t});\n\n\tfeedparser.on('readable', function () {\n\t\tvar post;\n\t\twhile (post = this.read()) {\n\t\t\tposts.push(transToPost(post)); //保存到对象数组\n\t\t}\n\t});\n\n\t/**\n\t * \n\t * \n\t * @param {any} string \n\t * @param {any} name \n\t * @returns \n\t */\n\tfunction getUrlParam(string, name) {\n\t\tvar reg = new RegExp(name + \"=([^&]*)(&|$)\"); //构造一个含有目标参数的正则表达式对象\n\t\tvar r = string.match(reg); //匹配目标参数\n\t\tif (r != null) return unescape(r[1]);\n\t\treturn null; //返回参数值\n\t}\n\n\t/**\n\t * \n\t * 对数据进行处理，形成和modal对应的数据\n\t * @param {object} post \n\t * @returns \n\t */\n\tfunction transToPost(post) {\n\t\tvar mPost = {\n\t\t\ttitle: post.title,\n\t\t\tlink: post.link,\n\t\t\tdescription: post.description,\n\t\t\tpubDate: post.pubDate,\n\t\t\tsource: post.source,\n\t\t\tauthor: post.author,\n\t\t\ttypeId: typeId\n\t\t};\n\n\t\treturn mPost;\n\t}\n\n\tfunction done() {\n\t\tconsole.log(arguments);\n\t}\n}"]}